version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: erp-postgres
    environment:
      POSTGRES_DB: erp_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_TYPE: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: erp_db
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - erp-network
    volumes:
      - ./backend/data:/app/data
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - erp-network
    restart: unless-stopped

  # Development version with SQLite (uncomment for local dev)
  # backend-dev:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: erp-backend-dev
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3001
  #     DB_TYPE: sqlite
  #     JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
  #     FRONTEND_URL: http://localhost:3000
  #   ports:
  #     - "3001:3001"
  #   networks:
  #     - erp-network
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #   command: npm run dev

volumes:
  postgres_data:

networks:
  erp-network:
    driver: bridge
